//PARENTS SELECTION WITH TOURNAMENT SELECTION STRATEGIES
#include<iostream>
#include<stdlib.h> 
using namespace std;


const int CAPACITY = 104;
const int GENE = 8;
const int WEIHGT[GENE] = { 25,35,45,5,25,3,2,2 };
const int POP_SIZE = 10; //We upgrade the population size to 10
int chromosome[POP_SIZE][GENE];
double fitness[POP_SIZE];
int parents[2][GENE]; // DATATYPE= choose int because follow the chromosome datatype; parents[2]= because parents has only 2 


void initializePopulation()
{
	for (int c = 0; c < POP_SIZE; c++)
	{
		for (int g = 0; g < GENE; g++)
		{
			chromosome[c][g] = rand() % 2;
		}
	}
}

void printChromosome()
{
	for (int c = 0; c < POP_SIZE; c++)
	{
		cout << "Chromosome " << c + 1 << ": ";
		for (int g = 0; g < GENE; g++)
		{

			cout << chromosome[c][g] << " ";

		}
		cout << endl;

	}

	cout << endl;
}

void evaluateChromosome()   
{
	int accumulatedWeight = 0;

	for (int c = 0; c < POP_SIZE; c++)
	{
		accumulatedWeight = 0;
		cout << "Total weight of chromosome " << c + 1 << ": ";
		for (int g = 0; g < GENE; g++)
		{

			if (chromosome[c][g] == 1)
			{
				accumulatedWeight = accumulatedWeight + WEIHGT[g];

			}


		}
		cout << accumulatedWeight;
		cout << endl;


		

		fitness[c] = abs(CAPACITY - accumulatedWeight) / (double)CAPACITY;  
		cout << "Fitness value of chromosome: " << c + 1 << " = " << fitness[c] << endl;
		cout << endl;
	}

}

void parentSelection()  
{
  // make declaration of the player1,player2, indexParents
	int player1, player2;
	int indexParents[2];

//for parents
	for (int i = 0; i < 2; i++)
	{
  //set player1 & player2
  
		player1 = rand() % POP_SIZE; //pick chromosome randomly from C0-C9
    
    //do-while loops is used because player1 and player2 will not always be same.
		do
    {
	    player2 = rand() % POP_SIZE;
		
    } while (player1 == player2);

		cout << "\nPlayer 1 index: " << player1;
		cout << "\nPlayer 2 index: " << player2;


		if (fitness[player1] < fitness[player2])  // In this case, the smaller the fitness value, the better the quality of the chromosome.
		{
			indexParents[i] = player1;
		}
		else
		{
			indexParents[i] = player2;
		}

		cout << "\nIndex Parents: " << indexParents[i];
	}


//for copy parent
	for (int i = 0; i < 2; i++) //row
	{
		cout << "\nParents " << i + 1 << ":";
		for (int g = 0; g < GENE; g++) //column
		{
			parents[i][g] = chromosome[indexParents[i]][g]; //把winner player的chromosome的gene code copy去parent, 所以after printout出来，你会看到parent：10101010 之类的gene code.
			cout << parents[i][g] << " ";
			
		}
	}
	cout << endl;
}


void main()
{
	initializePopulation();
	printChromosome();
	evaluateChromosome();
	parentSelection();
	
}

##########################################################################################################################################################################
OUTPUT:

Chromosome 1: 1 1 0 0 1 0 0 0
Chromosome 2: 0 0 1 1 1 1 1 1
Chromosome 3: 1 0 1 0 1 0 0 1
Chromosome 4: 0 0 1 0 0 1 1 0
Chromosome 5: 1 0 1 0 1 1 1 0
Chromosome 6: 1 1 0 1 1 0 1 1
Chromosome 7: 1 0 1 0 0 1 1 1
Chromosome 8: 1 1 1 0 0 1 0 0
Chromosome 9: 0 0 0 0 0 0 0 1
Chromosome 10: 0 1 0 0 0 1 1 0

Total weight of chromosome 1: 85
Fitness value of chromosome: 1 = 0.182692

Total weight of chromosome 2: 82
Fitness value of chromosome: 2 = 0.211538

Total weight of chromosome 3: 97
Fitness value of chromosome: 3 = 0.0673077

Total weight of chromosome 4: 50
Fitness value of chromosome: 4 = 0.519231

Total weight of chromosome 5: 100
Fitness value of chromosome: 5 = 0.0384615

Total weight of chromosome 6: 94
Fitness value of chromosome: 6 = 0.0961538

Total weight of chromosome 7: 77
Fitness value of chromosome: 7 = 0.259615

Total weight of chromosome 8: 108
Fitness value of chromosome: 8 = 0.0384615

Total weight of chromosome 9: 2
Fitness value of chromosome: 9 = 0.980769

Total weight of chromosome 10: 40
Fitness value of chromosome: 10 = 0.615385


Player 1 index: 9
Player 2 index: 3
Index Parents: 3
Player 1 index: 4
Player 2 index: 6
Index Parents: 4
Parents 1: 0 0 1 0 0 1 1 0
Parents 2: 1 0 1 0 1 1 1 0
